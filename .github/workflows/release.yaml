name: Release Build

on:
  push:
    tags:
      - 'v*.*.*' # Trigger on tags like v1.0.0, v1.2.3

env: # Define workflow-level environment variables
  EXECUTABLE_NAME: clicky

# Add permissions for creating releases and uploading assets
permissions:
  contents: write

jobs:
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }} # Output the upload URL
    steps:
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }} # Use the tag that triggered the workflow
          release_name: Release ${{ github.ref_name }}
          body: |
            Release build for ${{ github.ref_name }}
          draft: false
          prerelease: false

  build-release-linux:
    name: Build Release (Linux)
    runs-on: ubuntu-latest
    needs: create-release # Depend on the release creation job
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Install Linux dependencies for rdev and X11
        run: sudo apt-get update && sudo apt-get install -y libx11-dev libxtst-dev libudev-dev pkg-config libxcb1-dev

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build release binary
        run: cargo build --release --verbose

      - name: Prepare release artifact name (Linux)
        id: prep
        run: |
          ARTIFACT_NAME="${{ env.EXECUTABLE_NAME }}-linux-amd64"
          ORIGINAL_PATH="target/release/${{ env.EXECUTABLE_NAME }}"
          NEW_PATH="target/release/${ARTIFACT_NAME}"
          echo "Renaming '$ORIGINAL_PATH' to '$NEW_PATH'"
          mv "$ORIGINAL_PATH" "$NEW_PATH"
          echo "artifact_path=${NEW_PATH}" >> $GITHUB_OUTPUT
          echo "artifact_name=${ARTIFACT_NAME}" >> $GITHUB_OUTPUT

      - name: Upload Release Asset (Linux)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }} # Get URL from the new job
          asset_path: ${{ steps.prep.outputs.artifact_path }}
          asset_name: ${{ steps.prep.outputs.artifact_name }}
          asset_content_type: application/octet-stream

  build-release-windows:
    name: Build Release (Windows)
    runs-on: windows-latest
    needs: create-release # Depend on the release creation job
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build release binary
        run: cargo build --release --verbose

      - name: Prepare release artifact name (Windows)
        id: prep_win
        run: |
          $ARTIFACT_NAME = "${{ env.EXECUTABLE_NAME }}-windows-amd64.exe"
          $ORIGINAL_PATH = "target/release/${{ env.EXECUTABLE_NAME }}.exe"
          $NEW_PATH = "target/release/${ARTIFACT_NAME}"
          Write-Host "Renaming '$ORIGINAL_PATH' to '$NEW_PATH'"
          Move-Item -Path $ORIGINAL_PATH -Destination $NEW_PATH
          echo "artifact_path=${NEW_PATH}" >> $env:GITHUB_OUTPUT
          echo "artifact_name=${ARTIFACT_NAME}" >> $env:GITHUB_OUTPUT
        shell: pwsh # Use PowerShell for Windows commands

      - name: Upload Release Asset (Windows)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }} # Get URL from the new job
          asset_path: ${{ steps.prep_win.outputs.artifact_path }}
          asset_name: ${{ steps.prep_win.outputs.artifact_name }}
          asset_content_type: application/vnd.microsoft.portable-executable